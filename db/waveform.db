##Template file waveform

record(waveform, "$(USER):WAVEFORM:0")
{
    field(PINI, "1")
    field(DTYP, "asynInt16ArrayIn")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))WAVEFORM:0")
    field(FTVL, "SHORT")
    field(NELM, "$(WAVEFORM_SIZE)")
    field(FLNK, "$(USER):SUBARRAY:0 PP")
    field(SCAN, "I/O Intr")
  }

record(subArray, "$(USER):SUBARRAY:0")
{
  field(INP, "$(USER):WAVEFORM:0.VAL")
  field(FTVL, "SHORT")
  field(MALM, "$(WAVEFORM_SIZE)")
  field(NELM, "25000")
  field(INDX, "0")
  field(SCAN, "Passive")
  }

record(bo, "$(USER):WEB:INIT")
{
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "Passive")
    field(OUT, "@asynMask($(PORT), $(ADDR), 1, $(TIMEOUT))INITIALIZE")
    field(ZNAM, "Why")
    field(ONAM, "INIT")
  }

record(longin, "$(USER):BEGIN:ADDR:0")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))BEGIN_ADDR0")
    field(SCAN, "I/O Intr")
  }


record(longin, "$(USER):END:ADDR:0")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))END_ADDR0")
    field(SCAN, "I/O Intr")
  }


# The DaqMuxV2/DataBufferSize is set to NO:OF:WORDS/2 (as this is expressed in 32-bit words)
record(longin, "$(USER):BUFFER:SIZE")
{
    field(DTYP, "asynInt32")
    field(SCAN, "I/O Intr")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))BUFFER_SIZE")
  }


record(ao, "$(USER):WORD:COUNT:0")
{
    field(SCAN, "Passive")
    field(OUT, "$(USER):INIT:SEQ:0  PP")
  }

record(seq, "$(USER):INIT:SEQ:0")
{
    field(SCAN, "Passive")
    field(DOL1, "$(USER):WORD:COUNT:0")
    field(LNK1, "$(USER):FANOUT:BUFFER:0 PP")
    field(DO2, "1")
    field(LNK2, "$(USER):WEB:INIT:0 PP")
  }

record(dfanout, "$(USER):FANOUT:BUFFER:0")
{
    field(SCAN, "Passive")
    field(OUTA, "$(USER):BUFFER:RBV:0 PP")
    field(OUTB, "$(USER):TO:DIV:0.A PP")
    field(OUTC, "$(USER):WEB:INIT:0.A PP")
  }

record(ai, "$(USER):BUFFER:RBV:0")
{
    field(SCAN, "Passive")
  }

record(calcout, "$(USER):TO:DIV:0")
{
    field(SCAN, "Passive")
    field(CALC, "A/2")
    field(OUT, "$(USER):BUFFER:SIZE PP")
  }

#Single register for all the things

record(bo, "$(USER):RUN")
{
    field(SCAN, "Passive")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(ADDR), 1, $(TIMEOUT))RUN")
    #field(PINI, "1")
    field(ZNAM, "STOP")
    field(ONAM, "RUN")
  }


## This in the number of words from the user (N) ##
record(ao, "$(USER):NO:OF:WORDS") 
{
  field(DTYP, "asynInt32")
  field(SCAN, "Passive")
  field(DESC, "Buffer size (16-bit words)")
  field(EGU,  "words")
  field(PINI, "YES")
  field(VAL, "$(WAVEFORM_SIZE)")
  field(OUT,  "@asyn($(PORT), $(ADDR), $(TIMEOUT))NO_OF_WORDS")
  field(FLNK, "$(USER):UPDATE:NELM:SUBARRAY:0 PP")
  #field(OMSL, "closed_loop")
  #field(DOL, "$(USER):NO:OF:WORDS:rbv CPP")
  info(autosaveFields, "VAL")
}


record(calcout, "$(USER):UPDATE:NELM:SUBARRAY:0")
{
    field(INPA, "$(USER):NO:OF:WORDS")
    field(CALC, "A")  # Pass the value of the longout record
    field(OUT,  "$(USER):SUBARRAY:0.NELM PP")  # Update NELM field of subArray
    field(SCAN, "Passive")
}
##Template file waveform

record(waveform, "$(USER):WAVEFORM:1")
{
    field(PINI, "1")
    field(DTYP, "asynInt16ArrayIn")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))WAVEFORM:1")
    field(FTVL, "SHORT")
    field(NELM, "$(WAVEFORM_SIZE)")
    field(FLNK, "$(USER):SUBARRAY:1 PP")
    field(SCAN, "I/O Intr")
  }

record(subArray, "$(USER):SUBARRAY:1")
{
  field(INP, "$(USER):WAVEFORM:1.VAL")
  field(FTVL, "SHORT")
  field(MALM, "$(WAVEFORM_SIZE)")
  field(NELM, "25000")
  field(INDX, "0")
  field(SCAN, "Passive")
  }

record(bo, "$(USER):WEB:INIT")
{
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "Passive")
    field(OUT, "@asynMask($(PORT), $(ADDR), 1, $(TIMEOUT))INITIALIZE")
    field(ZNAM, "Why")
    field(ONAM, "INIT")
  }

record(longin, "$(USER):BEGIN:ADDR:1")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))BEGIN_ADDR1")
    field(SCAN, "I/O Intr")
  }


record(longin, "$(USER):END:ADDR:1")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))END_ADDR1")
    field(SCAN, "I/O Intr")
  }


# The DaqMuxV2/DataBufferSize is set to NO:OF:WORDS/2 (as this is expressed in 32-bit words)
record(longin, "$(USER):BUFFER:SIZE")
{
    field(DTYP, "asynInt32")
    field(SCAN, "I/O Intr")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))BUFFER_SIZE")
  }


record(ao, "$(USER):WORD:COUNT:1")
{
    field(SCAN, "Passive")
    field(OUT, "$(USER):INIT:SEQ:1  PP")
  }

record(seq, "$(USER):INIT:SEQ:1")
{
    field(SCAN, "Passive")
    field(DOL1, "$(USER):WORD:COUNT:1")
    field(LNK1, "$(USER):FANOUT:BUFFER:1 PP")
    field(DO2, "1")
    field(LNK2, "$(USER):WEB:INIT:1 PP")
  }

record(dfanout, "$(USER):FANOUT:BUFFER:1")
{
    field(SCAN, "Passive")
    field(OUTA, "$(USER):BUFFER:RBV:1 PP")
    field(OUTB, "$(USER):TO:DIV:1.A PP")
    field(OUTC, "$(USER):WEB:INIT:1.A PP")
  }

record(ai, "$(USER):BUFFER:RBV:1")
{
    field(SCAN, "Passive")
  }

record(calcout, "$(USER):TO:DIV:1")
{
    field(SCAN, "Passive")
    field(CALC, "A/2")
    field(OUT, "$(USER):BUFFER:SIZE PP")
  }

#Single register for all the things

record(bo, "$(USER):RUN")
{
    field(SCAN, "Passive")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(ADDR), 1, $(TIMEOUT))RUN")
    #field(PINI, "1")
    field(ZNAM, "STOP")
    field(ONAM, "RUN")
  }


## This in the number of words from the user (N) ##
record(ao, "$(USER):NO:OF:WORDS") 
{
  field(DTYP, "asynInt32")
  field(SCAN, "Passive")
  field(DESC, "Buffer size (16-bit words)")
  field(EGU,  "words")
  field(PINI, "YES")
  field(VAL, "$(WAVEFORM_SIZE)")
  field(OUT,  "@asyn($(PORT), $(ADDR), $(TIMEOUT))NO_OF_WORDS")
  field(FLNK, "$(USER):UPDATE:NELM:SUBARRAY:0 PP")
  #field(OMSL, "closed_loop")
  #field(DOL, "$(USER):NO:OF:WORDS:rbv CPP")
  info(autosaveFields, "VAL")
}


record(calcout, "$(USER):UPDATE:NELM:SUBARRAY:0")
{
    field(INPA, "$(USER):NO:OF:WORDS")
    field(CALC, "A")  # Pass the value of the longout record
    field(OUT,  "$(USER):SUBARRAY:0.NELM PP")  # Update NELM field of subArray
    field(SCAN, "Passive")
}
##Template file waveform

record(waveform, "$(USER):WAVEFORM:2")
{
    field(PINI, "1")
    field(DTYP, "asynInt16ArrayIn")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))WAVEFORM:2")
    field(FTVL, "SHORT")
    field(NELM, "$(WAVEFORM_SIZE)")
    field(FLNK, "$(USER):SUBARRAY:2 PP")
    field(SCAN, "I/O Intr")
  }

record(subArray, "$(USER):SUBARRAY:2")
{
  field(INP, "$(USER):WAVEFORM:2.VAL")
  field(FTVL, "SHORT")
  field(MALM, "$(WAVEFORM_SIZE)")
  field(NELM, "25000")
  field(INDX, "0")
  field(SCAN, "Passive")
  }

record(bo, "$(USER):WEB:INIT")
{
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "Passive")
    field(OUT, "@asynMask($(PORT), $(ADDR), 1, $(TIMEOUT))INITIALIZE")
    field(ZNAM, "Why")
    field(ONAM, "INIT")
  }

record(longin, "$(USER):BEGIN:ADDR:2")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))BEGIN_ADDR2")
    field(SCAN, "I/O Intr")
  }


record(longin, "$(USER):END:ADDR:2")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))END_ADDR2")
    field(SCAN, "I/O Intr")
  }


# The DaqMuxV2/DataBufferSize is set to NO:OF:WORDS/2 (as this is expressed in 32-bit words)
record(longin, "$(USER):BUFFER:SIZE")
{
    field(DTYP, "asynInt32")
    field(SCAN, "I/O Intr")
    field(INP, "@asyn($(PORT), $(ADDR), $(TIMEOUT))BUFFER_SIZE")
  }


record(ao, "$(USER):WORD:COUNT:2")
{
    field(SCAN, "Passive")
    field(OUT, "$(USER):INIT:SEQ:2  PP")
  }

record(seq, "$(USER):INIT:SEQ:2")
{
    field(SCAN, "Passive")
    field(DOL1, "$(USER):WORD:COUNT:2")
    field(LNK1, "$(USER):FANOUT:BUFFER:2 PP")
    field(DO2, "1")
    field(LNK2, "$(USER):WEB:INIT:2 PP")
  }

record(dfanout, "$(USER):FANOUT:BUFFER:2")
{
    field(SCAN, "Passive")
    field(OUTA, "$(USER):BUFFER:RBV:2 PP")
    field(OUTB, "$(USER):TO:DIV:2.A PP")
    field(OUTC, "$(USER):WEB:INIT:2.A PP")
  }

record(ai, "$(USER):BUFFER:RBV:2")
{
    field(SCAN, "Passive")
  }

record(calcout, "$(USER):TO:DIV:2")
{
    field(SCAN, "Passive")
    field(CALC, "A/2")
    field(OUT, "$(USER):BUFFER:SIZE PP")
  }

#Single register for all the things

record(bo, "$(USER):RUN")
{
    field(SCAN, "Passive")
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(ADDR), 1, $(TIMEOUT))RUN")
    #field(PINI, "1")
    field(ZNAM, "STOP")
    field(ONAM, "RUN")
  }


## This in the number of words from the user (N) ##
record(ao, "$(USER):NO:OF:WORDS") 
{
  field(DTYP, "asynInt32")
  field(SCAN, "Passive")
  field(DESC, "Buffer size (16-bit words)")
  field(EGU,  "words")
  field(PINI, "YES")
  field(VAL, "$(WAVEFORM_SIZE)")
  field(OUT,  "@asyn($(PORT), $(ADDR), $(TIMEOUT))NO_OF_WORDS")
  field(FLNK, "$(USER):UPDATE:NELM:SUBARRAY:0 PP")
  #field(OMSL, "closed_loop")
  #field(DOL, "$(USER):NO:OF:WORDS:rbv CPP")
  info(autosaveFields, "VAL")
}


record(calcout, "$(USER):UPDATE:NELM:SUBARRAY:0")
{
    field(INPA, "$(USER):NO:OF:WORDS")
    field(CALC, "A")  # Pass the value of the longout record
    field(OUT,  "$(USER):SUBARRAY:0.NELM PP")  # Update NELM field of subArray
    field(SCAN, "Passive")
}
